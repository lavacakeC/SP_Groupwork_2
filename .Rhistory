#Q6
no_loop_l_50 <- 0
largest <- vector(length = 100)
for (i in 1:10000) {
tmp <- dloop(50,1)
# no_loop_l_50 <- no_loop_l_50 + (sum(tmp[51:100]) == 0)
largest[max(tmp)] <- largest[max(tmp)] + 1
}
no_loop_l_50
dloop <- function(n, nreps) {
occur <- vector(length = 2*n)
box <- c(1:(2*n))
for (try in 1:nreps) {
card <- sample(box)
tmp <- vector(length = 2*n)
for (k in 1:(2*n)) {
card_find <- card[k]
for (try_k in 1:(2*n)) {
if(card_find == k) {
tmp[try_k] <- 1
break
}
card_find <- card[card_find]
}
}
occur <- occur + tmp
}
prob <- occur/nreps
return(prob)
}
#Q6
no_loop_l_50 <- 0
largest <- vector(length = 100)
for (i in 1:10000) {
tmp <- dloop(50,1)
# no_loop_l_50 <- no_loop_l_50 + (sum(tmp[51:100]) == 0)
largest[max(tmp)] <- largest[max(tmp)] + 1
}
no_loop_l_50
test <- largest/10000
test
largest <- vector(length = 100)
largest
lndex <- c(1:100)
for (i in 1:10000) {
tmp <- dloop(50,1)
index <- c(1:100)
# no_loop_l_50 <- no_loop_l_50 + (sum(tmp[51:100]) == 0)
index <- index[tmp == 1]
largest[max(index)] <- largest[max(index)] + 1
}
no_loop_l_50
test <- largest/10000
test
barplot(test)
sum(test)
first_card <- function(n, k, strategy, card) {
if (strategy == 1) {
card_find <- card[k]
}
else if (strategy == 2) {
card_find <- card[sample(c(1:(2*n)), 1)]
}
return(card_find)
}
strategy_1_2 <- function(n, k, card, card_find) {
Find_or_not <- FALSE
for (prisoner_try in 1:n) {
if (card_find == k) {
Find_or_not <- TRUE
break
}
card_find <- card[card_find]
}
return(Find_or_not)
}
strategy_3 <- function(n, k, card) {
return(sum(k == card[sample(c(1:(2*n)), n)]))
}
Pone <- function(n, k, strategy, nreps) {
prisoner <- c(1:(2*n))
escape_num <- 0
for (rep in 1:nreps) {
card <- sample(prisoner)
if (strategy == 1 | strategy == 2) {
card_find <- first_card(n, k, strategy, card)
escape_num <- escape_num + strategy_1_2(n, k, card, card_find)
}
else if (strategy == 3) {
escape_num <- escape_num + strategy_3(n, k, card)
}
}
return(escape_num/nreps)
}
Pone(50, 1, 1, 10000)
Pone(50, 1, 2, 10000)
Pone(50, 1, 3, 10000)
system.time(Pone(50, 1, 1, 10000))
system.time(Pone(50, 1, 2, 10000))
system.time(Pone(50, 1, 3, 10000))
Pall <- function(n, strategy, nreps) {
prisoner <- c(1:(2*n))
success_escape <- 0
for (rep in 1:nreps) {
card <- sample(prisoner)
escape_num <- 0
for (k in 1:(2*n)) {
if (strategy == 1 | strategy == 2) {
card_find <- first_card(n, k, strategy, card)
Find_or_not <- strategy_1_2(n, k, card, card_find)
if (!Find_or_not) {break}
escape_num <- escape_num + 1
}
else if (strategy == 3) {
Find_or_not <- strategy_3(n, k, card)
if (!Find_or_not) {break}
escape_num <- escape_num + 1
}
}
success_escape <- success_escape + (escape_num == (2*n))
}
return(success_escape/nreps)
}
Pall(50, 1, 10000)
Pall(50, 2, 10000)
Pall(50, 3, 10000)
system.time(Pall(50, 1, 10000))
system.time(Pall(50, 2, 10000))
system.time(Pall(50, 3, 10000))
Pone(50, 1, 2, 10000)
Pone(50, 1, 3, 10000)
Pone(50, 1, 1, 10000)
Pone(50, 1, 2, 10000)
Pone(50, 1, 3, 10000)
Pall(50, 1, 10000)
Pall(50, 2, 10000)
Pall(50, 3, 10000)
first_card <- function(n, k, strategy, card) {
if (strategy == 1) {
card_find <- card[k]
}
else if (strategy == 2) {
card_find <- card[sample(c(1:(2*n)), 1)]
}
return(card_find)
}
strategy_1_2 <- function(n, k, card, card_find) {
Find_or_not <- FALSE
for (prisoner_try in 1:n) {
if (card_find == k) {
Find_or_not <- TRUE
break
}
card_find <- card[card_find]
}
return(Find_or_not)
}
strategy_3 <- function(n, k, card) {
return(sum(k == card[sample(c(1:(2*n)), n)]))
}
Pone <- function(n, k, strategy, nreps) {
prisoner <- c(1:(2*n))
escape_num <- 0
for (rep in 1:nreps) {
card <- sample(prisoner)
if (strategy == 1 | strategy == 2) {
card_find <- first_card(n, k, strategy, card)
escape_num <- escape_num + strategy_1_2(n, k, card, card_find)
}
else if (strategy == 3) {
escape_num <- escape_num + strategy_3(n, k, card)
}
}
return(escape_num/nreps)
}
Pone(50, 1, 1, 10000)
Pall <- function(n, strategy, nreps) {
prisoner <- c(1:(2*n))
success_escape <- 0
for (rep in 1:nreps) {
card <- sample(prisoner)
escape_num <- 0
for (k in 1:(2*n)) {
if (strategy == 1 | strategy == 2) {
card_find <- first_card(n, k, strategy, card)
Find_or_not <- strategy_1_2(n, k, card, card_find)
if (!Find_or_not) {break}
escape_num <- escape_num + 1
}
else if (strategy == 3) {
Find_or_not <- strategy_3(n, k, card)
if (!Find_or_not) {break}
escape_num <- escape_num + 1
}
}
success_escape <- success_escape + (escape_num == (2*n))
}
return(success_escape/nreps)
}
Pall(50, 1, 10000)
Pall(50, 2, 10000)
Pall(50, 3, 10000)
Pall(5, 1, 10000)
Pall(5, 2, 10000)
Pall(5, 3, 10000)
Pone(5, 1, 1, 10000)
Pone(5, 1, 2, 10000)
Pone(5, 1, 3, 10000)
